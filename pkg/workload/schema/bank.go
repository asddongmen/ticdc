// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package schema

import (
	"bytes"
	"fmt"
	"math/rand"
)

const createBankTable = `
create table if not exists cdc_test_bank%d (
    id bigint NOT NULL,
    c1 varchar(5),
    c2 datetime,
    c3 datetime,
    c4 numeric(3, 0),
    c5 char(25),
    c6 char(10),
    c7 char(6),
    c8 numeric(10, 0),
    c9 char(5),
    c10 numeric(4, 0),
    c11 numeric(4, 0),
    c12 char(5),
    c13 char(8),
    c14 char(9),
    c15 char(9),
    c16 char(9),
    c17 char(9),
    c18 char(3),
    c19 char(1),
    c20 varchar(10),
    c21 char(1),
    c22 numeric(19, 0),
    c23 char(1),
    c24 varchar(8),
    c25 varchar(240),
    c26 char(1),
    c27 char(1),
    c28 numeric(3, 0),
    c29 char(6),
    c30 varchar(10),
    c31 char(9),
    c32 numeric(3, 0),
    c33 varchar(6),
    c34 varchar(8),
    c35 varchar(10),
    c36 varchar(5),
    c37 varchar(5),
    c38 char(1),
    c39 varchar(32),
    c40 char(23),
    c41 varchar(5),
    c42 char(1),
    c43 varchar(240),
    c44 char(18),
    c45 char(4),
    c46 char(2),
    c47 char(1),
    c48 numeric(2, 0),
    c49 varchar(35),
    c50 char(8),
    c51 char(8),
    c52 char(8),
    c53 varchar(240),
    c54 char(8),
    c55 char(23),
    c56 char(2),
    c57 varchar(10),
    c58 datetime,
    c59 datetime,
    c60 datetime(3) default current_timestamp(3),
    c61 varchar(30) default 'Z',
    PRIMARY KEY (id)
);
`

// GetBankCreateTableStatement returns the create-table sql of the table n
func GetBankCreateTableStatement(n int) string {
	return fmt.Sprintf(createBankTable, n)
}

func BuildBankInsertSql(tableN int, rowCount int) string {
	n := rand.Int63()
	var buf bytes.Buffer
	buf.WriteString(fmt.Sprintf(`
insert into cdc_test_bank%d (
        id,
        c1,
        c2,
        c3,
        c4,
        c5,
        c6,
        c7,
        c8,
        c9,
        c10,
        c11,
        c12,
        c13,
        c14,
        c15,
        c16,
        c17,
        c18,
        c19,
        c20,
        c21,
        c22,
        c23,
        c24,
        c25,
        c26,
        c27,
        c28,
        c29,
        c30,
        c31,
        c32,
        c33,
        c34,
        c35,
        c36,
        c37,
        c38,
        c39,
        c40,
        c41,
        c42,
        c43,
        c44,
        c45,
        c46,
        c47,
        c48,
        c49,
        c50,
        c51,
        c52,
        c53,
        c54,
        c55,
        c56,
        c57,
        c58,
        c59,
        c60,
        c61
)
values(%d,
'abcde',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
100,
'abcdefghijklmnopsrstuvwxy',
'1234567890',
'123456',
10000,
'12345',
1000,
1000,
'12345',
'12345678',
'123456789',
'123456789',
'123456789',
'123456789',
'123',
'1',
'1234567890',
'1',
1111111,
'1',
'12345678',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'1',
'1',
100,
'123456',
'1234567890',
'123456789',
100,
'123456',
'12345678',
'1234567890',
'12345',
'12345',
'1',
'12345678901234567890123456789012',
'12345678901234567890123',
'12345',
'1',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'123456789012345678',
'1234',
'12',
'1',
10,
'12345678901234567890123456789012345',
'12345678',
'12345678',
'12345678',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'12345678',
'12345678901234567890123',
'12',
'1234567890',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
'123456789012345678901234567890'
)
`, tableN, n))

	for r := 1; r < rowCount; r++ {
		n = rand.Int63()
		buf.WriteString(fmt.Sprintf(
			`,
(%d,
'abcde',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
100,
'abcdefghijklmnopsrstuvwxy',
'1234567890',
'123456',
10000,
'12345',
1000,
1000,
'12345',
'12345678',
'123456789',
'123456789',
'123456789',
'123456789',
'123',
'1',
'1234567890',
'1',
1111111,
'1',
'12345678',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'1',
'1',
100,
'123456',
'1234567890',
'123456789',
100,
'123456',
'12345678',
'1234567890',
'12345',
'12345',
'1',
'12345678901234567890123456789012',
'12345678901234567890123',
'12345',
'1',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'123456789012345678',
'1234',
'12',
'1',
10,
'12345678901234567890123456789012345',
'12345678',
'12345678',
'12345678',
'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890',
'12345678',
'12345678901234567890123',
'12',
'1234567890',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
'2019-03-05 01:53:56',
'123456789012345678901234567890'
)
`, n))
	}
	return buf.String()
}
